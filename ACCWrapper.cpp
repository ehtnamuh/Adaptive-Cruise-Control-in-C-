/*
 * File: ACCWrapper.cpp
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand,
 *   you must change it only in the area defined as:
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text'
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  -------------------------------------------------------------------------
 *
 * Created: Tue Jan 28 15:39:31 2025
 */

#define S_FUNCTION_LEVEL               2
#define S_FUNCTION_NAME                ACCWrapper

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS                     11

/* Input Port  0 */
#define IN_PORT_0_NAME                 v_ego
#define INPUT_0_DIMS_ND                {1,1}
#define INPUT_0_NUM_ELEMS              1
#define INPUT_0_WIDTH                  1
#define INPUT_DIMS_0_COL               1
#define INPUT_0_DTYPE                  real_T
#define INPUT_0_COMPLEX                COMPLEX_NO
#define IN_0_BUS_BASED                 0
#define IN_0_BUS_NAME
#define IN_0_DIMS                      1-D
#define INPUT_0_FEEDTHROUGH            1
#define IN_0_ISSIGNED                  0
#define IN_0_WORDLENGTH                8
#define IN_0_FIXPOINTSCALING           1
#define IN_0_FRACTIONLENGTH            9
#define IN_0_BIAS                      0
#define IN_0_SLOPE                     0.125

/* Input Port  1 */
#define IN_PORT_1_NAME                 driver_set_speed
#define INPUT_1_DIMS_ND                {1,1}
#define INPUT_1_NUM_ELEMS              1
#define INPUT_1_WIDTH                  1
#define INPUT_DIMS_1_COL               1
#define INPUT_1_DTYPE                  real_T
#define INPUT_1_COMPLEX                COMPLEX_NO
#define IN_1_BUS_BASED                 0
#define IN_1_BUS_NAME
#define IN_1_DIMS                      1-D
#define INPUT_1_FEEDTHROUGH            1
#define IN_1_ISSIGNED                  0
#define IN_1_WORDLENGTH                8
#define IN_1_FIXPOINTSCALING           1
#define IN_1_FRACTIONLENGTH            9
#define IN_1_BIAS                      0
#define IN_1_SLOPE                     0.125

/* Input Port  2 */
#define IN_PORT_2_NAME                 driver_intended_axl_trq
#define INPUT_2_DIMS_ND                {1,1}
#define INPUT_2_NUM_ELEMS              1
#define INPUT_2_WIDTH                  1
#define INPUT_DIMS_2_COL               1
#define INPUT_2_DTYPE                  real_T
#define INPUT_2_COMPLEX                COMPLEX_NO
#define IN_2_BUS_BASED                 0
#define IN_2_BUS_NAME
#define IN_2_DIMS                      1-D
#define INPUT_2_FEEDTHROUGH            1
#define IN_2_ISSIGNED                  0
#define IN_2_WORDLENGTH                8
#define IN_2_FIXPOINTSCALING           1
#define IN_2_FRACTIONLENGTH            9
#define IN_2_BIAS                      0
#define IN_2_SLOPE                     0.125

/* Input Port  3 */
#define IN_PORT_3_NAME                 acc_enable
#define INPUT_3_DIMS_ND                {1,1}
#define INPUT_3_NUM_ELEMS              1
#define INPUT_3_WIDTH                  1
#define INPUT_DIMS_3_COL               1
#define INPUT_3_DTYPE                  real_T
#define INPUT_3_COMPLEX                COMPLEX_NO
#define IN_3_BUS_BASED                 0
#define IN_3_BUS_NAME
#define IN_3_DIMS                      1-D
#define INPUT_3_FEEDTHROUGH            1
#define IN_3_ISSIGNED                  0
#define IN_3_WORDLENGTH                8
#define IN_3_FIXPOINTSCALING           1
#define IN_3_FRACTIONLENGTH            9
#define IN_3_BIAS                      0
#define IN_3_SLOPE                     0.125

/* Input Port  4 */
#define IN_PORT_4_NAME                 brake_pedal
#define INPUT_4_DIMS_ND                {1,1}
#define INPUT_4_NUM_ELEMS              1
#define INPUT_4_WIDTH                  1
#define INPUT_DIMS_4_COL               1
#define INPUT_4_DTYPE                  real_T
#define INPUT_4_COMPLEX                COMPLEX_NO
#define IN_4_BUS_BASED                 0
#define IN_4_BUS_NAME
#define IN_4_DIMS                      1-D
#define INPUT_4_FEEDTHROUGH            1
#define IN_4_ISSIGNED                  0
#define IN_4_WORDLENGTH                8
#define IN_4_FIXPOINTSCALING           1
#define IN_4_FRACTIONLENGTH            9
#define IN_4_BIAS                      0
#define IN_4_SLOPE                     0.125

/* Input Port  5 */
#define IN_PORT_5_NAME                 throttle_pedal
#define INPUT_5_DIMS_ND                {1,1}
#define INPUT_5_NUM_ELEMS              1
#define INPUT_5_WIDTH                  1
#define INPUT_DIMS_5_COL               1
#define INPUT_5_DTYPE                  real_T
#define INPUT_5_COMPLEX                COMPLEX_NO
#define IN_5_BUS_BASED                 0
#define IN_5_BUS_NAME
#define IN_5_DIMS                      1-D
#define INPUT_5_FEEDTHROUGH            1
#define IN_5_ISSIGNED                  0
#define IN_5_WORDLENGTH                8
#define IN_5_FIXPOINTSCALING           1
#define IN_5_FRACTIONLENGTH            9
#define IN_5_BIAS                      0
#define IN_5_SLOPE                     0.125

/* Input Port  6 */
#define IN_PORT_6_NAME                 ress
#define INPUT_6_DIMS_ND                {1,1}
#define INPUT_6_NUM_ELEMS              1
#define INPUT_6_WIDTH                  1
#define INPUT_DIMS_6_COL               1
#define INPUT_6_DTYPE                  real_T
#define INPUT_6_COMPLEX                COMPLEX_NO
#define IN_6_BUS_BASED                 0
#define IN_6_BUS_NAME
#define IN_6_DIMS                      1-D
#define INPUT_6_FEEDTHROUGH            1
#define IN_6_ISSIGNED                  0
#define IN_6_WORDLENGTH                8
#define IN_6_FIXPOINTSCALING           1
#define IN_6_FRACTIONLENGTH            9
#define IN_6_BIAS                      0
#define IN_6_SLOPE                     0.125

/* Input Port  7 */
#define IN_PORT_7_NAME                 v_lead
#define INPUT_7_DIMS_ND                {1,1}
#define INPUT_7_NUM_ELEMS              1
#define INPUT_7_WIDTH                  1
#define INPUT_DIMS_7_COL               1
#define INPUT_7_DTYPE                  real_T
#define INPUT_7_COMPLEX                COMPLEX_NO
#define IN_7_BUS_BASED                 0
#define IN_7_BUS_NAME
#define IN_7_DIMS                      1-D
#define INPUT_7_FEEDTHROUGH            1
#define IN_7_ISSIGNED                  0
#define IN_7_WORDLENGTH                8
#define IN_7_FIXPOINTSCALING           1
#define IN_7_FRACTIONLENGTH            9
#define IN_7_BIAS                      0
#define IN_7_SLOPE                     0.125

/* Input Port  8 */
#define IN_PORT_8_NAME                 distance_to_lead
#define INPUT_8_DIMS_ND                {1,1}
#define INPUT_8_NUM_ELEMS              1
#define INPUT_8_WIDTH                  1
#define INPUT_DIMS_8_COL               1
#define INPUT_8_DTYPE                  real_T
#define INPUT_8_COMPLEX                COMPLEX_NO
#define IN_8_BUS_BASED                 0
#define IN_8_BUS_NAME
#define IN_8_DIMS                      1-D
#define INPUT_8_FEEDTHROUGH            1
#define IN_8_ISSIGNED                  0
#define IN_8_WORDLENGTH                8
#define IN_8_FIXPOINTSCALING           1
#define IN_8_FRACTIONLENGTH            9
#define IN_8_BIAS                      0
#define IN_8_SLOPE                     0.125

/* Input Port  9 */
#define IN_PORT_9_NAME                 max_deceleration
#define INPUT_9_DIMS_ND                {1,1}
#define INPUT_9_NUM_ELEMS              1
#define INPUT_9_WIDTH                  1
#define INPUT_DIMS_9_COL               1
#define INPUT_9_DTYPE                  real_T
#define INPUT_9_COMPLEX                COMPLEX_NO
#define IN_9_BUS_BASED                 0
#define IN_9_BUS_NAME
#define IN_9_DIMS                      1-D
#define INPUT_9_FEEDTHROUGH            1
#define IN_9_ISSIGNED                  0
#define IN_9_WORDLENGTH                8
#define IN_9_FIXPOINTSCALING           1
#define IN_9_FRACTIONLENGTH            9
#define IN_9_BIAS                      0
#define IN_9_SLOPE                     0.125

/* Input Port  10 */
#define IN_PORT_10_NAME                max_torque
#define INPUT_10_DIMS_ND               {1,1}
#define INPUT_10_NUM_ELEMS             1
#define INPUT_10_WIDTH                 1
#define INPUT_DIMS_10_COL              1
#define INPUT_10_DTYPE                 real_T
#define INPUT_10_COMPLEX               COMPLEX_NO
#define IN_10_BUS_BASED                0
#define IN_10_BUS_NAME
#define IN_10_DIMS                     1-D
#define INPUT_10_FEEDTHROUGH           1
#define IN_10_ISSIGNED                 0
#define IN_10_WORDLENGTH               8
#define IN_10_FIXPOINTSCALING          1
#define IN_10_FRACTIONLENGTH           9
#define IN_10_BIAS                     0
#define IN_10_SLOPE                    0.125
#define NUM_OUTPUTS                    1

/* Output Port  0 */
#define OUT_PORT_0_NAME                engine_torque_request
#define OUTPUT_0_DIMS_ND               {1,1}
#define OUTPUT_0_NUM_ELEMS             1
#define OUTPUT_0_WIDTH                 1
#define OUTPUT_DIMS_0_COL              1
#define OUTPUT_0_DTYPE                 real_T
#define OUTPUT_0_COMPLEX               COMPLEX_NO
#define OUT_0_BUS_BASED                0
#define OUT_0_BUS_NAME
#define OUT_0_DIMS                     1-D
#define OUT_0_ISSIGNED                 1
#define OUT_0_WORDLENGTH               8
#define OUT_0_FIXPOINTSCALING          1
#define OUT_0_FRACTIONLENGTH           3
#define OUT_0_BIAS                     0
#define OUT_0_SLOPE                    0.125
#define NPARAMS                        11

/* Parameter 0 */
#define PARAMETER_0_NAME               Kp
#define PARAMETER_0_DTYPE              real_T
#define PARAMETER_0_COMPLEX            COMPLEX_NO

/* Parameter 1 */
#define PARAMETER_1_NAME               Kd
#define PARAMETER_1_DTYPE              real_T
#define PARAMETER_1_COMPLEX            COMPLEX_NO

/* Parameter 2 */
#define PARAMETER_2_NAME               Ki
#define PARAMETER_2_DTYPE              real_T
#define PARAMETER_2_COMPLEX            COMPLEX_NO

/* Parameter 3 */
#define PARAMETER_3_NAME               pid_speed_control
#define PARAMETER_3_DTYPE              real_T
#define PARAMETER_3_COMPLEX            COMPLEX_NO

/* Parameter 4 */
#define PARAMETER_4_NAME               d_Kp
#define PARAMETER_4_DTYPE              real_T
#define PARAMETER_4_COMPLEX            COMPLEX_NO

/* Parameter 5 */
#define PARAMETER_5_NAME               d_Ki
#define PARAMETER_5_DTYPE              real_T
#define PARAMETER_5_COMPLEX            COMPLEX_NO

/* Parameter 6 */
#define PARAMETER_6_NAME               d_Kd
#define PARAMETER_6_DTYPE              real_T
#define PARAMETER_6_COMPLEX            COMPLEX_NO

/* Parameter 7 */
#define PARAMETER_7_NAME               time_gap
#define PARAMETER_7_DTYPE              real_T
#define PARAMETER_7_COMPLEX            COMPLEX_NO

/* Parameter 8 */
#define PARAMETER_8_NAME               time_gap_tolerance
#define PARAMETER_8_DTYPE              real_T
#define PARAMETER_8_COMPLEX            COMPLEX_NO

/* Parameter 9 */
#define PARAMETER_9_NAME               minimum_distance
#define PARAMETER_9_DTYPE              real_T
#define PARAMETER_9_COMPLEX            COMPLEX_NO

/* Parameter 10 */
#define PARAMETER_10_NAME              dt
#define PARAMETER_10_DTYPE             real_T
#define PARAMETER_10_COMPLEX           COMPLEX_NO
#define SAMPLE_TIME_0                  INHERITED_SAMPLE_TIME
#define NUM_DISC_STATES                0
#define DISC_STATES_IC                 [0]
#define NUM_CONT_STATES                0
#define CONT_STATES_IC                 [0]
#define SFUNWIZ_GENERATE_TLC           0
#define SOURCEFILES                    "__SFB__INC_PATH C:\Users\Lenovo\Documents\EcoCar\Controls Development\ACC"
#define PANELINDEX                     N/A
#define USE_SIMSTRUCT                  0
#define SHOW_COMPILE_STEPS             1
#define CREATE_DEBUG_MEXFILE           0
#define SAVE_CODE_ONLY                 1
#define SFUNWIZ_REVISION               3.0

/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#define PARAM_DEF0(S)                  ssGetSFcnParam(S, 0)
#define PARAM_DEF1(S)                  ssGetSFcnParam(S, 1)
#define PARAM_DEF2(S)                  ssGetSFcnParam(S, 2)
#define PARAM_DEF3(S)                  ssGetSFcnParam(S, 3)
#define PARAM_DEF4(S)                  ssGetSFcnParam(S, 4)
#define PARAM_DEF5(S)                  ssGetSFcnParam(S, 5)
#define PARAM_DEF6(S)                  ssGetSFcnParam(S, 6)
#define PARAM_DEF7(S)                  ssGetSFcnParam(S, 7)
#define PARAM_DEF8(S)                  ssGetSFcnParam(S, 8)
#define PARAM_DEF9(S)                  ssGetSFcnParam(S, 9)
#define PARAM_DEF10(S)                 ssGetSFcnParam(S, 10)
#define IS_PARAM_DOUBLE(pVal)          (mxIsNumeric(pVal) && !mxIsLogical(pVal) &&\
!mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && mxIsDouble(pVal))

extern void ACCWrapper_Start_wrapper(void **pW,
  const real_T *Kp, const int_T p_width0,
  const real_T *Kd, const int_T p_width1,
  const real_T *Ki, const int_T p_width2,
  const real_T *pid_speed_control, const int_T p_width3,
  const real_T *d_Kp, const int_T p_width4,
  const real_T *d_Ki, const int_T p_width5,
  const real_T *d_Kd, const int_T p_width6,
  const real_T *time_gap, const int_T p_width7,
  const real_T *time_gap_tolerance, const int_T p_width8,
  const real_T *minimum_distance, const int_T p_width9,
  const real_T *dt, const int_T p_width10);
extern void ACCWrapper_Outputs_wrapper(const real_T *v_ego,
  const real_T *driver_set_speed,
  const real_T *driver_intended_axl_trq,
  const real_T *acc_enable,
  const real_T *brake_pedal,
  const real_T *throttle_pedal,
  const real_T *ress,
  const real_T *v_lead,
  const real_T *distance_to_lead,
  const real_T *max_deceleration,
  const real_T *max_torque,
  real_T *engine_torque_request,
  void **pW,
  const real_T *Kp, const int_T p_width0,
  const real_T *Kd, const int_T p_width1,
  const real_T *Ki, const int_T p_width2,
  const real_T *pid_speed_control, const int_T p_width3,
  const real_T *d_Kp, const int_T p_width4,
  const real_T *d_Ki, const int_T p_width5,
  const real_T *d_Kd, const int_T p_width6,
  const real_T *time_gap, const int_T p_width7,
  const real_T *time_gap_tolerance, const int_T p_width8,
  const real_T *minimum_distance, const int_T p_width9,
  const real_T *dt, const int_T p_width10);

/*====================*
 * S-function methods *
 *====================*/
#if !defined(__LCC__) && (defined(__cplusplus) || (__STDC_VERSION__ >= 199901L))
#define __sfb_snprintf_(msgToWriteTo,size,fmtStr,arg1) snprintf(msgToWriteTo,size,fmtStr,arg1)
#else
#define __sfb_snprintf_(msgToWriteTo,size,fmtStr,arg1) sprintf(msgToWriteTo,fmtStr,arg1)
#endif

#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS) && defined(MATLAB_MEX_FILE)

/* Function: mdlCheckParameters =============================================
 * Abstract:
 *     Verify parameter definitions and types.
 */
static void mdlCheckParameters(SimStruct *S)
{
  int paramIndex = 0;
  bool invalidParam = false;

  /* All parameters must match the S-function Builder Dialog */
  {
    const mxArray *pVal0 = ssGetSFcnParam(S, 0);
    if (!IS_PARAM_DOUBLE(pVal0)) {
      invalidParam = true;
      paramIndex = 0;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal1 = ssGetSFcnParam(S, 1);
    if (!IS_PARAM_DOUBLE(pVal1)) {
      invalidParam = true;
      paramIndex = 1;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal2 = ssGetSFcnParam(S, 2);
    if (!IS_PARAM_DOUBLE(pVal2)) {
      invalidParam = true;
      paramIndex = 2;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal3 = ssGetSFcnParam(S, 3);
    if (!IS_PARAM_DOUBLE(pVal3)) {
      invalidParam = true;
      paramIndex = 3;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal4 = ssGetSFcnParam(S, 4);
    if (!IS_PARAM_DOUBLE(pVal4)) {
      invalidParam = true;
      paramIndex = 4;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal5 = ssGetSFcnParam(S, 5);
    if (!IS_PARAM_DOUBLE(pVal5)) {
      invalidParam = true;
      paramIndex = 5;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal6 = ssGetSFcnParam(S, 6);
    if (!IS_PARAM_DOUBLE(pVal6)) {
      invalidParam = true;
      paramIndex = 6;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal7 = ssGetSFcnParam(S, 7);
    if (!IS_PARAM_DOUBLE(pVal7)) {
      invalidParam = true;
      paramIndex = 7;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal8 = ssGetSFcnParam(S, 8);
    if (!IS_PARAM_DOUBLE(pVal8)) {
      invalidParam = true;
      paramIndex = 8;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal9 = ssGetSFcnParam(S, 9);
    if (!IS_PARAM_DOUBLE(pVal9)) {
      invalidParam = true;
      paramIndex = 9;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal10 = ssGetSFcnParam(S, 10);
    if (!IS_PARAM_DOUBLE(pVal10)) {
      invalidParam = true;
      paramIndex = 10;
      goto EXIT_POINT;
    }
  }

 EXIT_POINT:
  if (invalidParam) {
    static char parameterErrorMsg[1024];
    __sfb_snprintf_(parameterErrorMsg, 1024,
                    "The data type and or complexity of parameter %d does not match the "
                    "information specified in the S-function Builder dialog. "
                    "For non-double parameters you will need to cast them using int8, int16, "
                    "int32, uint8, uint16, uint32 or boolean.", paramIndex + 1);
    ssSetLocalErrorStatus(S, parameterErrorMsg);
  }

  return;
}

#endif                                 /* MDL_CHECK_PARAMETERS */

/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S)
{
  ssSetNumSFcnParams(S, NPARAMS);      /* Number of expected parameters */

#if defined(MATLAB_MEX_FILE)

  if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
    mdlCheckParameters(S);
    if (ssGetErrorStatus(S) != NULL) {
      return;
    }
  } else {
    return;                            /* Parameter mismatch will be reported by Simulink */
  }

#endif

  ssSetArrayLayoutForCodeGen(S, SS_COLUMN_MAJOR);
  ssSetOperatingPointCompliance(S, DISALLOW_OPERATING_POINT);
  ssSetNumContStates(S, NUM_CONT_STATES);
  ssSetNumDiscStates(S, NUM_DISC_STATES);
  if (!ssSetNumInputPorts(S, NUM_INPUTS))
    return;

  /* Input Port 0 */
  ssSetInputPortWidth(S, 0, INPUT_0_NUM_ELEMS);
  ssSetInputPortDataType(S, 0, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 0, 1);/*direct input signal access*/

  /* Input Port 1 */
  ssSetInputPortWidth(S, 1, INPUT_1_NUM_ELEMS);
  ssSetInputPortDataType(S, 1, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 1, INPUT_1_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 1, INPUT_1_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 1, 1);/*direct input signal access*/

  /* Input Port 2 */
  ssSetInputPortWidth(S, 2, INPUT_2_NUM_ELEMS);
  ssSetInputPortDataType(S, 2, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 2, INPUT_2_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 2, INPUT_2_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 2, 1);/*direct input signal access*/

  /* Input Port 3 */
  ssSetInputPortWidth(S, 3, INPUT_3_NUM_ELEMS);
  ssSetInputPortDataType(S, 3, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 3, INPUT_3_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 3, INPUT_3_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 3, 1);/*direct input signal access*/

  /* Input Port 4 */
  ssSetInputPortWidth(S, 4, INPUT_4_NUM_ELEMS);
  ssSetInputPortDataType(S, 4, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 4, INPUT_4_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 4, INPUT_4_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 4, 1);/*direct input signal access*/

  /* Input Port 5 */
  ssSetInputPortWidth(S, 5, INPUT_5_NUM_ELEMS);
  ssSetInputPortDataType(S, 5, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 5, INPUT_5_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 5, INPUT_5_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 5, 1);/*direct input signal access*/

  /* Input Port 6 */
  ssSetInputPortWidth(S, 6, INPUT_6_NUM_ELEMS);
  ssSetInputPortDataType(S, 6, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 6, INPUT_6_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 6, INPUT_6_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 6, 1);/*direct input signal access*/

  /* Input Port 7 */
  ssSetInputPortWidth(S, 7, INPUT_7_NUM_ELEMS);
  ssSetInputPortDataType(S, 7, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 7, INPUT_7_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 7, INPUT_7_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 7, 1);/*direct input signal access*/

  /* Input Port 8 */
  ssSetInputPortWidth(S, 8, INPUT_8_NUM_ELEMS);
  ssSetInputPortDataType(S, 8, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 8, INPUT_8_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 8, INPUT_8_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 8, 1);/*direct input signal access*/

  /* Input Port 9 */
  ssSetInputPortWidth(S, 9, INPUT_9_NUM_ELEMS);
  ssSetInputPortDataType(S, 9, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 9, INPUT_9_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 9, INPUT_9_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 9, 1);/*direct input signal access*/

  /* Input Port 10 */
  ssSetInputPortWidth(S, 10, INPUT_10_NUM_ELEMS);
  ssSetInputPortDataType(S, 10, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 10, INPUT_10_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 10, INPUT_10_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 10, 1);/*direct input signal access*/
  if (!ssSetNumOutputPorts(S, NUM_OUTPUTS))
    return;

  /* Output Port 0 */
  ssSetOutputPortWidth(S, 0, OUTPUT_0_NUM_ELEMS);
  ssSetOutputPortDataType(S, 0, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
  ssSetNumPWork(S, 1);
  ssSetNumSampleTimes(S, 1);
  ssSetNumRWork(S, 0);
  ssSetNumIWork(S, 0);
  ssSetNumModes(S, 0);
  ssSetNumNonsampledZCs(S, 0);
  ssSetSimulinkVersionGeneratedIn(S, "23.2");

  /* Take care when specifying exception free code - see sfuntmpl_doc.c */
  ssSetRuntimeThreadSafetyCompliance(S, RUNTIME_THREAD_SAFETY_COMPLIANCE_FALSE);
  ssSetOptions(S, (SS_OPTION_EXCEPTION_FREE_CODE |
                   SS_OPTION_WORKS_WITH_CODE_REUSE));
}

#if defined(MATLAB_MEX_FILE)
#define MDL_SET_INPUT_PORT_DIMENSION_INFO

static void mdlSetInputPortDimensionInfo(SimStruct *S,
  int_T port,
  const DimsInfo_T *dimsInfo)
{
  if (!ssSetInputPortDimensionInfo(S, port, dimsInfo))
    return;
}

#endif

#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO)

static void mdlSetOutputPortDimensionInfo(SimStruct *S,
  int_T port,
  const DimsInfo_T *dimsInfo)
{
  if (!ssSetOutputPortDimensionInfo(S, port, dimsInfo))
    return;
}

#endif

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
  ssSetSampleTime(S, 0, SAMPLE_TIME_0);
  ssSetModelReferenceSampleTimeDefaultInheritance(S);
  ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_INPUT_PORT_DATA_TYPE

static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType)
{
  ssSetInputPortDataType(S, 0, dType);
}

#define MDL_SET_OUTPUT_PORT_DATA_TYPE

static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType)
{
  ssSetOutputPortDataType(S, 0, dType);
}

#define MDL_SET_DEFAULT_PORT_DATA_TYPES

static void mdlSetDefaultPortDataTypes(SimStruct *S)
{
  ssSetInputPortDataType(S, 0, SS_DOUBLE);
  ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

static void mdlSetWorkWidths(SimStruct *S)
{
  const char_T *rtParamNames[] = { "P1", "P2", "P3", "P4", "P5", "P6", "P7",
    "P8", "P9", "P10", "P11" };

  ssRegAllTunableParamsAsRunTimeParams(S, rtParamNames);
}

#endif

#define MDL_START                                                /* Change to #undef to remove function */
#if defined(MDL_START)

/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S)
{
  void **pW = ssGetPWork(S);
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int_T p_width2 = mxGetNumberOfElements(PARAM_DEF2(S));
  const int_T p_width3 = mxGetNumberOfElements(PARAM_DEF3(S));
  const int_T p_width4 = mxGetNumberOfElements(PARAM_DEF4(S));
  const int_T p_width5 = mxGetNumberOfElements(PARAM_DEF5(S));
  const int_T p_width6 = mxGetNumberOfElements(PARAM_DEF6(S));
  const int_T p_width7 = mxGetNumberOfElements(PARAM_DEF7(S));
  const int_T p_width8 = mxGetNumberOfElements(PARAM_DEF8(S));
  const int_T p_width9 = mxGetNumberOfElements(PARAM_DEF9(S));
  const int_T p_width10 = mxGetNumberOfElements(PARAM_DEF10(S));
  const real_T *Kp = (const real_T *) mxGetDoubles(PARAM_DEF0(S));
  const real_T *Kd = (const real_T *) mxGetDoubles(PARAM_DEF1(S));
  const real_T *Ki = (const real_T *) mxGetDoubles(PARAM_DEF2(S));
  const real_T *pid_speed_control = (const real_T *) mxGetDoubles(PARAM_DEF3(S));
  const real_T *d_Kp = (const real_T *) mxGetDoubles(PARAM_DEF4(S));
  const real_T *d_Ki = (const real_T *) mxGetDoubles(PARAM_DEF5(S));
  const real_T *d_Kd = (const real_T *) mxGetDoubles(PARAM_DEF6(S));
  const real_T *time_gap = (const real_T *) mxGetDoubles(PARAM_DEF7(S));
  const real_T *time_gap_tolerance = (const real_T *) mxGetDoubles(PARAM_DEF8(S));
  const real_T *minimum_distance = (const real_T *) mxGetDoubles(PARAM_DEF9(S));
  const real_T *dt = (const real_T *) mxGetDoubles(PARAM_DEF10(S));
  ACCWrapper_Start_wrapper(pW, Kp, p_width0, Kd, p_width1, Ki, p_width2,
    pid_speed_control, p_width3, d_Kp, p_width4, d_Ki, p_width5, d_Kd, p_width6,
    time_gap, p_width7, time_gap_tolerance, p_width8, minimum_distance, p_width9,
    dt, p_width10);
}

#endif                                 /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{
  void **pW = ssGetPWork(S);
  const real_T *v_ego = (real_T *) ssGetInputPortRealSignal(S, 0);
  const real_T *driver_set_speed = (real_T *) ssGetInputPortRealSignal(S, 1);
  const real_T *driver_intended_axl_trq = (real_T *) ssGetInputPortRealSignal(S,
    2);
  const real_T *acc_enable = (real_T *) ssGetInputPortRealSignal(S, 3);
  const real_T *brake_pedal = (real_T *) ssGetInputPortRealSignal(S, 4);
  const real_T *throttle_pedal = (real_T *) ssGetInputPortRealSignal(S, 5);
  const real_T *ress = (real_T *) ssGetInputPortRealSignal(S, 6);
  const real_T *v_lead = (real_T *) ssGetInputPortRealSignal(S, 7);
  const real_T *distance_to_lead = (real_T *) ssGetInputPortRealSignal(S, 8);
  const real_T *max_deceleration = (real_T *) ssGetInputPortRealSignal(S, 9);
  const real_T *max_torque = (real_T *) ssGetInputPortRealSignal(S, 10);
  real_T *engine_torque_request = (real_T *) ssGetOutputPortRealSignal(S, 0);
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int_T p_width2 = mxGetNumberOfElements(PARAM_DEF2(S));
  const int_T p_width3 = mxGetNumberOfElements(PARAM_DEF3(S));
  const int_T p_width4 = mxGetNumberOfElements(PARAM_DEF4(S));
  const int_T p_width5 = mxGetNumberOfElements(PARAM_DEF5(S));
  const int_T p_width6 = mxGetNumberOfElements(PARAM_DEF6(S));
  const int_T p_width7 = mxGetNumberOfElements(PARAM_DEF7(S));
  const int_T p_width8 = mxGetNumberOfElements(PARAM_DEF8(S));
  const int_T p_width9 = mxGetNumberOfElements(PARAM_DEF9(S));
  const int_T p_width10 = mxGetNumberOfElements(PARAM_DEF10(S));
  const real_T *Kp = (const real_T *) mxGetDoubles(PARAM_DEF0(S));
  const real_T *Kd = (const real_T *) mxGetDoubles(PARAM_DEF1(S));
  const real_T *Ki = (const real_T *) mxGetDoubles(PARAM_DEF2(S));
  const real_T *pid_speed_control = (const real_T *) mxGetDoubles(PARAM_DEF3(S));
  const real_T *d_Kp = (const real_T *) mxGetDoubles(PARAM_DEF4(S));
  const real_T *d_Ki = (const real_T *) mxGetDoubles(PARAM_DEF5(S));
  const real_T *d_Kd = (const real_T *) mxGetDoubles(PARAM_DEF6(S));
  const real_T *time_gap = (const real_T *) mxGetDoubles(PARAM_DEF7(S));
  const real_T *time_gap_tolerance = (const real_T *) mxGetDoubles(PARAM_DEF8(S));
  const real_T *minimum_distance = (const real_T *) mxGetDoubles(PARAM_DEF9(S));
  const real_T *dt = (const real_T *) mxGetDoubles(PARAM_DEF10(S));
  ACCWrapper_Outputs_wrapper(v_ego, driver_set_speed, driver_intended_axl_trq,
    acc_enable, brake_pedal, throttle_pedal, ress, v_lead, distance_to_lead,
    max_deceleration, max_torque, engine_torque_request, pW, Kp, p_width0, Kd,
    p_width1, Ki, p_width2, pid_speed_control, p_width3, d_Kp, p_width4, d_Ki,
    p_width5, d_Kd, p_width6, time_gap, p_width7, time_gap_tolerance, p_width8,
    minimum_distance, p_width9, dt, p_width10);
}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S)
{
}

#ifdef MATLAB_MEX_FILE                 /* Is this file being compiled as a MEX-file? */
#include "simulink.c"                  /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"                   /* Code generation registration function */
#endif
